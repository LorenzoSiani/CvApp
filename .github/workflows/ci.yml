name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.adminCommand(\"ismaster\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Run backend tests
      env:
        MONGO_URL: mongodb://localhost:27017
        DB_NAME: test_wordpress_manager
        CORS_ORIGINS: http://localhost:3000
      run: |
        cd tests
        python -m pytest test_backend_api.py test_validation.py -v

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        yarn install --frozen-lockfile
    
    - name: Run frontend linting
      run: |
        cd frontend
        yarn lint || echo "Linting warnings detected"
    
    - name: Build frontend
      run: |
        cd frontend
        yarn build
    
    - name: Run frontend tests
      run: |
        cd frontend
        yarn test --coverage --watchAll=false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan on backend
      run: |
        cd backend
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: backend/bandit-report.json

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install code quality tools
      run: |
        pip install black isort flake8 mypy
    
    - name: Check code formatting
      run: |
        cd backend
        black --check . || echo "Code formatting issues found"
        isort --check-only . || echo "Import sorting issues found"
        flake8 . --max-line-length=88 --extend-ignore=E203,W503 || echo "Linting issues found"

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock
    
    - name: Install dependencies
      run: |
        cd backend && pip install -r requirements.txt
        cd ../frontend && yarn install --frozen-lockfile
    
    - name: Start backend server
      env:
        MONGO_URL: mongodb://localhost:27017
        DB_NAME: test_wordpress_manager
        CORS_ORIGINS: http://localhost:3000
      run: |
        cd backend
        uvicorn server:app --host 0.0.0.0 --port 8001 &
        sleep 10
    
    - name: Build frontend
      run: |
        cd frontend
        REACT_APP_BACKEND_URL=http://localhost:8001 yarn build
    
    - name: Serve frontend
      run: |
        cd frontend
        npx serve -s build -l 3000 &
        sleep 10
    
    - name: Run integration tests
      run: |
        # Test backend health
        curl -f http://localhost:8001/api/ || exit 1
        
        # Test frontend serving
        curl -f http://localhost:3000 || exit 1
        
        echo "Integration tests passed!"

  deploy:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        echo "This step would typically deploy to your hosting platform"
        echo "For Emergent platform, this would trigger the deployment process"
        
        # Example deployment steps:
        # - Build Docker images
        # - Push to container registry
        # - Update production environment
        # - Run post-deployment tests
        
        echo "âœ… Deployment completed successfully!"